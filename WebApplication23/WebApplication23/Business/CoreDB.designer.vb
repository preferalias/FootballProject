'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.17929
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="football_bet")>  _
Partial Public Class CoreDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertLeague_Master(instance As League_Master)
    End Sub
  Partial Private Sub UpdateLeague_Master(instance As League_Master)
    End Sub
  Partial Private Sub DeleteLeague_Master(instance As League_Master)
    End Sub
  Partial Private Sub InsertTeam_Master(instance As Team_Master)
    End Sub
  Partial Private Sub UpdateTeam_Master(instance As Team_Master)
    End Sub
  Partial Private Sub DeleteTeam_Master(instance As Team_Master)
    End Sub
  Partial Private Sub InsertMatch_Detail(instance As Match_Detail)
    End Sub
  Partial Private Sub UpdateMatch_Detail(instance As Match_Detail)
    End Sub
  Partial Private Sub DeleteMatch_Detail(instance As Match_Detail)
    End Sub
  Partial Private Sub InsertMatch_Program(instance As Match_Program)
    End Sub
  Partial Private Sub UpdateMatch_Program(instance As Match_Program)
    End Sub
  Partial Private Sub DeleteMatch_Program(instance As Match_Program)
    End Sub
  Partial Private Sub InsertLocation(instance As Location)
    End Sub
  Partial Private Sub UpdateLocation(instance As Location)
    End Sub
  Partial Private Sub DeleteLocation(instance As Location)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("DefaultConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property League_Masters() As System.Data.Linq.Table(Of League_Master)
		Get
			Return Me.GetTable(Of League_Master)
		End Get
	End Property
	
	Public ReadOnly Property Team_Masters() As System.Data.Linq.Table(Of Team_Master)
		Get
			Return Me.GetTable(Of Team_Master)
		End Get
	End Property
	
	Public ReadOnly Property Match_Details() As System.Data.Linq.Table(Of Match_Detail)
		Get
			Return Me.GetTable(Of Match_Detail)
		End Get
	End Property
	
	Public ReadOnly Property Match_Programs() As System.Data.Linq.Table(Of Match_Program)
		Get
			Return Me.GetTable(Of Match_Program)
		End Get
	End Property
	
	Public ReadOnly Property Locations() As System.Data.Linq.Table(Of Location)
		Get
			Return Me.GetTable(Of Location)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.League_Master")>  _
Partial Public Class League_Master
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _league_id As Integer
	
	Private _league_name As String
	
	Private _Team_Masters As EntitySet(Of Team_Master)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onleague_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onleague_idChanged()
    End Sub
    Partial Private Sub Onleague_nameChanging(value As String)
    End Sub
    Partial Private Sub Onleague_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Team_Masters = New EntitySet(Of Team_Master)(AddressOf Me.attach_Team_Masters, AddressOf Me.detach_Team_Masters)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_league_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property league_id() As Integer
		Get
			Return Me._league_id
		End Get
		Set
			If ((Me._league_id = value)  _
						= false) Then
				Me.Onleague_idChanging(value)
				Me.SendPropertyChanging
				Me._league_id = value
				Me.SendPropertyChanged("league_id")
				Me.Onleague_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_league_name", DbType:="VarChar(200)")>  _
	Public Property league_name() As String
		Get
			Return Me._league_name
		End Get
		Set
			If (String.Equals(Me._league_name, value) = false) Then
				Me.Onleague_nameChanging(value)
				Me.SendPropertyChanging
				Me._league_name = value
				Me.SendPropertyChanged("league_name")
				Me.Onleague_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="League_Master_Team_Master", Storage:="_Team_Masters", ThisKey:="league_id", OtherKey:="league_id")>  _
	Public Property Team_Masters() As EntitySet(Of Team_Master)
		Get
			Return Me._Team_Masters
		End Get
		Set
			Me._Team_Masters.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Team_Masters(ByVal entity As Team_Master)
		Me.SendPropertyChanging
		entity.League_Master = Me
	End Sub
	
	Private Sub detach_Team_Masters(ByVal entity As Team_Master)
		Me.SendPropertyChanging
		entity.League_Master = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Team_Master")>  _
Partial Public Class Team_Master
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _team_id As Integer
	
	Private _league_id As Integer
	
	Private _team_name As String
	
	Private _Match_Details As EntitySet(Of Match_Detail)
	
	Private _League_Master As EntityRef(Of League_Master)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onteam_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onteam_idChanged()
    End Sub
    Partial Private Sub Onleague_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onleague_idChanged()
    End Sub
    Partial Private Sub Onteam_nameChanging(value As String)
    End Sub
    Partial Private Sub Onteam_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Match_Details = New EntitySet(Of Match_Detail)(AddressOf Me.attach_Match_Details, AddressOf Me.detach_Match_Details)
		Me._League_Master = CType(Nothing, EntityRef(Of League_Master))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_team_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property team_id() As Integer
		Get
			Return Me._team_id
		End Get
		Set
			If ((Me._team_id = value)  _
						= false) Then
				Me.Onteam_idChanging(value)
				Me.SendPropertyChanging
				Me._team_id = value
				Me.SendPropertyChanged("team_id")
				Me.Onteam_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_league_id", DbType:="Int NOT NULL")>  _
	Public Property league_id() As Integer
		Get
			Return Me._league_id
		End Get
		Set
			If ((Me._league_id = value)  _
						= false) Then
				If Me._League_Master.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onleague_idChanging(value)
				Me.SendPropertyChanging
				Me._league_id = value
				Me.SendPropertyChanged("league_id")
				Me.Onleague_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_team_name", DbType:="VarChar(200)")>  _
	Public Property team_name() As String
		Get
			Return Me._team_name
		End Get
		Set
			If (String.Equals(Me._team_name, value) = false) Then
				Me.Onteam_nameChanging(value)
				Me.SendPropertyChanging
				Me._team_name = value
				Me.SendPropertyChanged("team_name")
				Me.Onteam_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Master_Match_Detail", Storage:="_Match_Details", ThisKey:="team_id", OtherKey:="team_id")>  _
	Public Property Match_Details() As EntitySet(Of Match_Detail)
		Get
			Return Me._Match_Details
		End Get
		Set
			Me._Match_Details.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="League_Master_Team_Master", Storage:="_League_Master", ThisKey:="league_id", OtherKey:="league_id", IsForeignKey:=true)>  _
	Public Property League_Master() As League_Master
		Get
			Return Me._League_Master.Entity
		End Get
		Set
			Dim previousValue As League_Master = Me._League_Master.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._League_Master.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._League_Master.Entity = Nothing
					previousValue.Team_Masters.Remove(Me)
				End If
				Me._League_Master.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Team_Masters.Add(Me)
					Me._league_id = value.league_id
				Else
					Me._league_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("League_Master")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Match_Details(ByVal entity As Match_Detail)
		Me.SendPropertyChanging
		entity.Team_Master = Me
	End Sub
	
	Private Sub detach_Match_Details(ByVal entity As Match_Detail)
		Me.SendPropertyChanging
		entity.Team_Master = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Match_Detail")>  _
Partial Public Class Match_Detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _team_id As Integer
	
	Private _date As Date
	
	Private _match_program As Integer
	
	Private _location As Integer
	
	Private _goal_positive As Integer
	
	Private _goal_negative As Integer
	
	Private _Team_Master As EntityRef(Of Team_Master)
	
	Private _Match_Program1 As EntityRef(Of Match_Program)
	
	Private _Location1 As EntityRef(Of Location)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onteam_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onteam_idChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub Onmatch_programChanging(value As Integer)
    End Sub
    Partial Private Sub Onmatch_programChanged()
    End Sub
    Partial Private Sub OnlocationChanging(value As Integer)
    End Sub
    Partial Private Sub OnlocationChanged()
    End Sub
    Partial Private Sub Ongoal_positiveChanging(value As Integer)
    End Sub
    Partial Private Sub Ongoal_positiveChanged()
    End Sub
    Partial Private Sub Ongoal_negativeChanging(value As Integer)
    End Sub
    Partial Private Sub Ongoal_negativeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Team_Master = CType(Nothing, EntityRef(Of Team_Master))
		Me._Match_Program1 = CType(Nothing, EntityRef(Of Match_Program))
		Me._Location1 = CType(Nothing, EntityRef(Of Location))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_team_id", DbType:="Int NOT NULL")>  _
	Public Property team_id() As Integer
		Get
			Return Me._team_id
		End Get
		Set
			If ((Me._team_id = value)  _
						= false) Then
				If Me._Team_Master.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onteam_idChanging(value)
				Me.SendPropertyChanging
				Me._team_id = value
				Me.SendPropertyChanged("team_id")
				Me.Onteam_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="Date NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_match_program", DbType:="Int NOT NULL")>  _
	Public Property match_program() As Integer
		Get
			Return Me._match_program
		End Get
		Set
			If ((Me._match_program = value)  _
						= false) Then
				If Me._Match_Program1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.Onmatch_programChanging(value)
				Me.SendPropertyChanging
				Me._match_program = value
				Me.SendPropertyChanged("match_program")
				Me.Onmatch_programChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="Int NOT NULL")>  _
	Public Property location() As Integer
		Get
			Return Me._location
		End Get
		Set
			If ((Me._location = value)  _
						= false) Then
				If Me._Location1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnlocationChanging(value)
				Me.SendPropertyChanging
				Me._location = value
				Me.SendPropertyChanged("location")
				Me.OnlocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goal_positive", DbType:="Int NOT NULL")>  _
	Public Property goal_positive() As Integer
		Get
			Return Me._goal_positive
		End Get
		Set
			If ((Me._goal_positive = value)  _
						= false) Then
				Me.Ongoal_positiveChanging(value)
				Me.SendPropertyChanging
				Me._goal_positive = value
				Me.SendPropertyChanged("goal_positive")
				Me.Ongoal_positiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_goal_negative", DbType:="Int NOT NULL")>  _
	Public Property goal_negative() As Integer
		Get
			Return Me._goal_negative
		End Get
		Set
			If ((Me._goal_negative = value)  _
						= false) Then
				Me.Ongoal_negativeChanging(value)
				Me.SendPropertyChanging
				Me._goal_negative = value
				Me.SendPropertyChanged("goal_negative")
				Me.Ongoal_negativeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Team_Master_Match_Detail", Storage:="_Team_Master", ThisKey:="team_id", OtherKey:="team_id", IsForeignKey:=true)>  _
	Public Property Team_Master() As Team_Master
		Get
			Return Me._Team_Master.Entity
		End Get
		Set
			Dim previousValue As Team_Master = Me._Team_Master.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Team_Master.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Team_Master.Entity = Nothing
					previousValue.Match_Details.Remove(Me)
				End If
				Me._Team_Master.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Match_Details.Add(Me)
					Me._team_id = value.team_id
				Else
					Me._team_id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Team_Master")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Match_Program_Match_Detail", Storage:="_Match_Program1", ThisKey:="match_program", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Match_Program1() As Match_Program
		Get
			Return Me._Match_Program1.Entity
		End Get
		Set
			Dim previousValue As Match_Program = Me._Match_Program1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Match_Program1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Match_Program1.Entity = Nothing
					previousValue.Match_Details.Remove(Me)
				End If
				Me._Match_Program1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Match_Details.Add(Me)
					Me._match_program = value.id
				Else
					Me._match_program = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Match_Program1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_Match_Detail", Storage:="_Location1", ThisKey:="location", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Location1() As Location
		Get
			Return Me._Location1.Entity
		End Get
		Set
			Dim previousValue As Location = Me._Location1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Location1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Location1.Entity = Nothing
					previousValue.Match_Details.Remove(Me)
				End If
				Me._Location1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Match_Details.Add(Me)
					Me._location = value.id
				Else
					Me._location = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Location1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Match_Program")>  _
Partial Public Class Match_Program
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _mp_name As String
	
	Private _Match_Details As EntitySet(Of Match_Detail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onmp_nameChanging(value As String)
    End Sub
    Partial Private Sub Onmp_nameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Match_Details = New EntitySet(Of Match_Detail)(AddressOf Me.attach_Match_Details, AddressOf Me.detach_Match_Details)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_mp_name", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property mp_name() As String
		Get
			Return Me._mp_name
		End Get
		Set
			If (String.Equals(Me._mp_name, value) = false) Then
				Me.Onmp_nameChanging(value)
				Me.SendPropertyChanging
				Me._mp_name = value
				Me.SendPropertyChanged("mp_name")
				Me.Onmp_nameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Match_Program_Match_Detail", Storage:="_Match_Details", ThisKey:="id", OtherKey:="match_program")>  _
	Public Property Match_Details() As EntitySet(Of Match_Detail)
		Get
			Return Me._Match_Details
		End Get
		Set
			Me._Match_Details.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Match_Details(ByVal entity As Match_Detail)
		Me.SendPropertyChanging
		entity.Match_Program1 = Me
	End Sub
	
	Private Sub detach_Match_Details(ByVal entity As Match_Detail)
		Me.SendPropertyChanging
		entity.Match_Program1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Location")>  _
Partial Public Class Location
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _location As String
	
	Private _Match_Details As EntitySet(Of Match_Detail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnlocationChanging(value As String)
    End Sub
    Partial Private Sub OnlocationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Match_Details = New EntitySet(Of Match_Detail)(AddressOf Me.attach_Match_Details, AddressOf Me.detach_Match_Details)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_location", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property location() As String
		Get
			Return Me._location
		End Get
		Set
			If (String.Equals(Me._location, value) = false) Then
				Me.OnlocationChanging(value)
				Me.SendPropertyChanging
				Me._location = value
				Me.SendPropertyChanged("location")
				Me.OnlocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Location_Match_Detail", Storage:="_Match_Details", ThisKey:="id", OtherKey:="location")>  _
	Public Property Match_Details() As EntitySet(Of Match_Detail)
		Get
			Return Me._Match_Details
		End Get
		Set
			Me._Match_Details.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Match_Details(ByVal entity As Match_Detail)
		Me.SendPropertyChanging
		entity.Location1 = Me
	End Sub
	
	Private Sub detach_Match_Details(ByVal entity As Match_Detail)
		Me.SendPropertyChanging
		entity.Location1 = Nothing
	End Sub
End Class
